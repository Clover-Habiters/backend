plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.0.5'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.clover'
version = '1.1.0'
sourceCompatibility = '17'

configurations {
    asciidoctorExtensions
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot Starter
    // WEB
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    // Data
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    // Restdocs
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    // DB - MySQL, H2
    implementation 'com.mysql:mysql-connector-j:8.0.32'
    runtimeOnly 'com.h2database:h2'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // QueryDSL (Boot 3.x)
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    implementation 'javax.xml.bind:jaxb-api:2.3.0' // ??

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    // Embedded Redis
    testImplementation 'it.ozimov:embedded-redis:0.7.2'

    // Jwt
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    // Object Storage - S3
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.429'

    // Mapstruct  (Lombok 의 getter, setter, builder 를 이용하여 생성되므로 Lombok 먼저 의존성 주입 후 사용해야함)
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

    // P6spy
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'

    // Slack
    implementation "net.gpedro.integrations.slack:slack-webhook:1.4.0"

    // Bucket4j - 처리율 제한
    implementation 'com.bucket4j:bucket4j-core:8.3.0'
}

/*jacoco 설정*/
jacocoTestReport {
    dependsOn test
    finalizedBy 'jacocoTestCoverageVerification'
    reports {
        html.enabled true
        xml.enabled true
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            excludes = [ // 제외할 패키지
                         '*.global.util*', // util 패키지
                         '*.global.config*', // config 패키지
                         '*.global.base*', // base 패키지
                         '*.global.infra*', // 추후 추가 바람
                         '*.global.auth.oauth*', // 추후 추가 바람
            ]

        }

    }
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

/*asciidoctor 설정*/
ext {
    snippetsDir = file('build/generated-snippets')
}

asciidoctor {
    attributes 'snippets': snippetsDir
    configurations 'asciidoctorExtensions'
    forkOptions {
        jvmArgs('--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED', '--add-opens', 'java.base/java.io=ALL-UNNAMED')
    }
    dependsOn test
    inputs.dir snippetsDir
    sources {
        include("**/index.adoc", "**/api/*.adoc", "**/common/*.adoc", "**/enums/*.adoc")
    }
    baseDirFollowsSourceFile()
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

bootJar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}") {
        into "static/docs"
    }

}

task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("${asciidoctor.outputDir}")
    into file("build/resources/main/static")
}

build {
    dependsOn copyDocument
}

